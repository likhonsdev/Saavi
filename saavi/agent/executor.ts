// agent/executor.ts
import { planner } from './planner';
import { responder } from './responder';
import { fileManager } from '../utils/fileManager';
import { bugFixer } from '../tasks/bugFix';
import { browserAutomator } from '../utils/browserAutomator';
import { Page } from 'playwright';

// Define the interface for a plan step, mirroring the planner's output.
interface PlanStep {
  action: 'readFile' | 'writeFile' | 'runCommand' | 'bugFix' | 'featureBuild' | 'commitChanges' | 'runE2ETest';
  description: string;
  path?: string;
  content?: string;
  command?: string;
  url?: string;
  testFunction?: (page: Page) => Promise<void>;
}

class Executor {
  async run(userRequest: string) {
    console.log("📝 Creating a plan...");
    const plan: PlanStep[] = await planner.createPlan(userRequest);
    console.log("✅ Plan created:", plan);

    for (const step of plan) {
      console.log(`\n▶️ Executing: ${step.action} - ${step.description}`);
      switch (step.action) {
        case 'readFile':
          // Often just for context, might store in a variable for later steps
          await fileManager.readFile(step.path!);
          break;
        case 'bugFix':
          await bugFixer.run(step.path!, step.description);
          break;
        case 'commitChanges':
          await responder.commitAndPush(step.content!); // content would be the commit message
          break;
        case 'runE2ETest':
          const testLogic = step.testFunction || (async (page: Page) => {
            // This default test logic could also be generated by the LLM
            console.log("Running E2E test for login button...");
            await page.click('#login-button');
            const spinnerVisible = await page.isVisible('.spinner');
            if (!spinnerVisible) throw new Error("Spinner did not appear after click.");
          });
          await browserAutomator.runTest(step.url || 'http://localhost:3000', testLogic);
          break;
        // ... other cases for featureBuild, testWriter, etc.
        default:
          console.warn(`Unknown action: ${step.action}`);
      }
    }
    console.log("\n✨ Task complete!");
  }
}

export const executor = new Executor();
